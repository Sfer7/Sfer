// https://www.acmicpc.net/problem/14502

// BFS와 브루트포스적 접근을 통한 구현 문제 풀이
#include <iostream>
#include <vector>
#include <queue>

using namespace std;

int n, m;
int cnt = 0;
vector < vector <int>> v;
vector < vector <int>> cpy;
queue <pair <int, int>> q;
int ans = 0;
int dx[4] = { -1, 1, 0, 0 };
int dy[4] = { 0, 0, -1, 1 };

void bfs(queue <pair <int, int>> q)
{
	cpy = v;								// 본래 배열에서 벽에 따라 감염이 퍼져나간 그래프를 따로 만들어야 하기 때문에, 복제 처리
	while (!q.empty())
	{
		int tmpx = q.front().first;
		int tmpy = q.front().second;
		q.pop();

		for (int i = 0; i < 4; i++)
		{
			int nx = tmpx + dx[i];
			int ny = tmpy + dy[i];

			if (nx >= 1 && ny >= 1 && nx <= n && ny <= m)
			{
				if (cpy[nx][ny] == 0)
				{
					cpy[nx][ny] = 2;
					q.push({ nx, ny });
				}
			}
		}
	}
	cnt = 0;
	for (int i = 1; i <= n; i++)						// 복제된 그래프에서 0의 갯수를 구함
	{
		for (int j = 1; j <= m; j++)
		{
			if (cpy[i][j] == 0)
			{
				cnt++;
			}
		}
	}
	ans = max(ans, cnt);
}

void make_wall(int count)
{
	if (count == 3)								// 벽이 3개가 되었을 때, bfs를 수행하도록 함
	{
		bfs(q);
	}
	else
	{
		for (int i = 1; i <= n; i++)					// 벽을 재귀적으로 생성해 줌
		{
			for (int j = 1; j <= m; j++)
			{
				if (v[i][j] == 0)
				{
					v[i][j] = 1;
					make_wall(count + 1);
					v[i][j] = 0;
				}
			}
		}
	}
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);

	cin >> n >> m;
	v.resize(n + 1, vector <int>(m + 1));
	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= m; j++)
		{
			cin >> v[i][j];
			if (v[i][j] == 2)
			{
				q.push({ i, j });				// 그래프를 입력받을 때 바이러스가 있는 위치를 미리 queue에 삽입해줌
			}
		}
	}
	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= m; j++)
		{
			if (v[i][j] == 0)					// 그래프가 0인 부분에 모두 벽을 설치해야하므로 make_wall 수행
			{
				v[i][j] = 1;
				make_wall(1);
				v[i][j] = 0;
			}
		}
	}
	cout << ans;
}
