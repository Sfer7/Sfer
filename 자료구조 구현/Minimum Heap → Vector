// Priorit_queue STL을 사용하지 않고 Vector로 Minimum Heap 구현하기

#include <iostream>
#include <vector>

using namespace std;

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);

	int t, y;
	string x;
	vector <int> heap;
	heap.push_back(-1);
	cin >> t;
	while (t--)
	{
		cin >> x;
		if (x == "isEmpty")
		{
			if (heap.size() == 1)
			{
				cout << 1 << "\n";
			}
			else
			{
				cout << 0 << "\n";
			}
		}
		else if (x == "size")
		{
			cout << heap.size() - 1 << "\n";
		}
		else if (x == "insert")
		{
			cin >> y;
			heap.push_back(y);
			int curNode = heap.size() - 1;
			while (1)
			{
				if (curNode == 1) break;
				if (heap[curNode / 2] > heap[curNode])
				{
					swap(heap[curNode / 2], heap[curNode]);
					curNode /= 2;
				}
				else
				{
					break;
				}
			}
		}
		else if (x == "top")
		{
			if (heap.size() == 1)
			{
				cout << -1 << "\n";
			}
			else
			{
				cout << heap[1] << "\n";
			}
		}
		else if (x == "pop")
		{
			if (heap.size() == 1)
			{
				cout << -1 << "\n";
			}
			else
			{
				cout << heap[1] << "\n";
				swap(heap[heap.size() - 1], heap[1]);
				heap.pop_back();
				int curNode = 1;
				while (1)
				{
					if (curNode * 2 + 1 < heap.size())
					{
						if (heap[curNode * 2] < heap[curNode * 2 + 1])
						{
							if (heap[curNode] > heap[curNode * 2])
							{
								swap(heap[curNode], heap[curNode * 2]);
								curNode = curNode * 2;
							}
							else break;
						}
						else
						{
							if (heap[curNode] > heap[curNode * 2 + 1])
							{
								swap(heap[curNode], heap[curNode * 2 + 1]);
								curNode = curNode * 2 + 1;
							}
							else break;
						}
					}
					else if (curNode * 2 < heap.size())
					{
						if (heap[curNode] > heap[curNode * 2])
						{
							swap(heap[curNode], heap[curNode * 2]);
							curNode = curNode * 2;
						}
						else break;
					}
					else
					{
						break;
					}
				}
			}
		}
		else if (x == "print")
		{
			if (heap.size() == 1)
			{
				cout << -1 << "\n";
			}
			else
			{
				for (int i = 1; i < heap.size(); i++)
				{
					cout << heap[i] << " ";
				}
				cout << "\n";
			}
		}
	}
}
