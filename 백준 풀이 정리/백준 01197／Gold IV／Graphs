// https://www.acmicpc.net/problem/1197

// 1. Prim Algorithm을 이용한 풀이
#include <iostream>
#include <queue>
#include <vector>

using namespace std;
#define ll long long

vector <vector <pair <int, ll>>> v;
bool visit[10001] = { false };
ll ans = 0;

void prim(int x)
{
	priority_queue <pair <ll, int>, vector <pair <ll, int>>, greater <pair <ll, int>>> pq;
	pq.push({ 0, x });
	while (!pq.empty())
	{
		ll dist = pq.top().first;
		int node = pq.top().second;
		pq.pop();
		if (visit[node]) continue;
		visit[node] = true;
		ans += dist;
		for (int i = 0; i < v[node].size(); i++)
		{
			if (!visit[v[node][i].first])
			{
				pq.push({ v[node][i].second, v[node][i].first });
			}
		}
	}
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	
	int V, E;
	int x, y;
	ll z;
	cin >> V >> E;
	v.resize(V + 1);
	for (int i = 0; i < E; i++)
	{
		cin >> x >> y >> z;
		v[x].push_back({ y, z });
		v[y].push_back({ x, z });
	}
	prim(1);
	cout << ans;
}

// 2. Kruskal Algorithm을 이용한 풀이
