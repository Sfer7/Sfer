// https://www.acmicpc.net/problem/9205

// BFS를 이용하여 최단으로 탐색하는 방법 구현 (DFS의 경우 TLE)
#include <iostream>
#include <vector>
#include <queue>

using namespace std;

int n;
vector <pair <int, int>> conv;                                        // 편의점의 좌표를 배열로 나타냄 (1 ~ 101)
pair <int, int> goal;                                                 // 도착지 지점 좌표 (102)
bool ans = false;
bool visit[103] = { false };                                          // 시작점을 0으로 놓고, 1~102까지 방문위치가 필요하므로 visit 크기를 103으로 잡아줌

void bfs(int x, int y)                                                // 시작 좌표 x와 y를 받는 bfs 구현
{
	queue <pair<int, pair<int, int>>> q;                                /* (구현하고 나서 안 것인데, 갈 수 있는 최대 거리에 대하여는 넣을 필요가 없었다.
                                                                          앞부분을 제외하고 queue <pair <int, int>> q로 간단히 구현 가능 */
	q.push({{1000},{x, y}});
	visit[0] = true;                                                    // 시작 위치의 visit는 true로 바꿔줌
	int goalx = goal.first;                                             // 도착지의 x좌표
	int goaly = goal.second;                                            // 도착지의 y좌표
	while (!q.empty())
	{
		int tmpx = q.front().second.first;
		int tmpy = q.front().second.second;
		int cango = q.front().first;                                      // (이 부분도 앞서 말한 이유와 같은 이유로, 필요하지 않다)
		q.pop();
		int cost = abs(goalx - tmpx) + abs(goaly - tmpy);
		if (cost <= cango)                                                // 도착지까지 1000으로 갈 수 있으면 true를 반환하고 return.
		{
			ans = true;
			return;
		}
		for (int i = 1; i <= n; i++)                                      // 도착지까지 가지 못했으면, 편의점까지 갈 수 있는지 확인
		{
			int convx = conv[i].first;
			int convy = conv[i].second;
			int dist = abs(convx - tmpx) + abs(convy - tmpy);
			if (dist <= cango && !visit[i])
			{
				visit[i] = true;
				q.push({ 1000, {convx, convy} });
			}
		}
	}
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);

	int t;
	int x, y;
	cin >> t;
	while (t--)
	{
		cin >> n;
		cin >> x >> y;
		pair <int, int> start = { x, y };
		conv.resize(n + 1);                                               // 편의점 배열은 n+1사이즈에 맞게 크기를 지정해줌. (배열을 1부터 쓰기 위함)
		for (int i = 1; i <= n; i++)
		{
			cin >> x >> y;
			conv[i] = { x, y };
		}
		cin >> x >> y;
		goal = { x, y };
		bfs(start.first, start.second);                                   // 시작 좌표로 bfs 실행
		if (ans)
		{
			cout << "happy\n";
		}
		else
		{
			cout << "sad\n";
		}
		conv.clear();                                                     // 종료 후 conv 배열을 초기화
		ans = false;                                                      // 답변값 ans 초기화
		fill_n(visit, 103, false);                                        // visit 배열 초기화
	}
}
