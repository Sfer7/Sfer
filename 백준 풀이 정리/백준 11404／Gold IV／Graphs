// https://www.acmicpc.net/problem/11404

// Floyd-Warshall Algorithm
#include <iostream>

using namespace std;
int map[100][100] = { 0 };
int V, E;

void f_w(int x)                                             // 플로이드-워셜 알고리즘
{
    for(int i=0; i<V; i++)
    {
        if(map[i][x] != 0)                                  // 0이 아닌 경우에 수행함. (0인 경우 경로가 없으므로)
        {
            for(int j=0; j<V; j++)
            {
                if(map[x][j] != 0)                          // 마찬가지로 0이 아닌 경우에 수행.
                {
                    int val = map[i][x] + map[x][j];        // 들어갈 임시값
                    if(map[i][j] == 0)                      // map[i][j]에 아직 경로가 없다면, 현재 경로를 최단경로로 표시
                    {
                        map[i][j] = val;
                    }
                    else
                    {
                        if(map[i][j] > val)                 // 이미 값이 있는 경우, 존재하는 값보다 작다면 갱신
                        {
                            map[i][j] = val;
                        }
                    }
                }
            }
        }
    }
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    
    int x, y, z;
    cin >> V >> E;
    for(int i=0; i<E; i++)
    {
        cin >> x >> y >> z;
        if(map[x-1][y-1] == 0)                               // 처음 입력되는 경우 z값을 바로 입력
        {
            map[x-1][y-1] = z;
        }
        else
        {
            if(map[x-1][y-1] > z)                             // 이미 값이 있는 경우, 존재하는 값보다 작다면 갱신 (플로이드-워셜 함수 내부와 동일)
            {
                map[x-1][y-1] = z;
            }
        }
    }
    for(int i=0; i<V; i++) f_w(i);                            // 모든 정점에 대하여 플로이드-워셜 알고리즘을 수행
    for(int i=0; i<V; i++)
    {
        for(int j=0; j<V; j++)
        {
            if(i==j) cout << 0 << " ";                        // i==j인 곳은 0으로 표시 (self-loop가 없는 그래프이므로 자기 자신에게 가는 값은 0)
            else cout << map[i][j] << " ";                    // 그 외의 곳은 그래프에 표기된 대로 표시
        }
        cout << "\n";
    }
}
