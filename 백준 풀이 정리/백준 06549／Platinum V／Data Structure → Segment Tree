// https://www.acmicpc.net/problem/6549

// 세그먼트 트리를 이용한 풀이
#include <iostream>
#include <vector>
#include <cmath>

using namespace std;
#define ll long long
#define INF (int)2e9

vector <ll> arr;																// 높이를 저장하는 벡터 arr
vector <int> sgt;																// 최소 높이의 인덱스를 저장하는 벡터 sgt (인덱스의 범위가 int이므로 int 처리)

int n;
ll ans;

int make_sgt(int node, int start, int end)
{
	if (start == end) return sgt[node] = start;									// 한 개의 노드로 귀결될 때 arr 배열의 index를 return

	int mid = (start + end) / 2;
	int left_idx = make_sgt(node * 2, start, mid);
	int right_idx = make_sgt(node * 2 + 1, mid + 1, end);
	return sgt[node] = arr[left_idx] < arr[right_idx] ? left_idx : right_idx;	// 노드의 값은 left와 right의 높이 중 작은 높이의 index를 return
}

int minh(int node, int start, int end, int left, int right)						// 최소 높이의 index를 구하는 함수
{
	if (left > end || right < start) return INF;								// 범위 밖에 있을 때, INF로 처리 (예외처리를 위함)
	if (left <= start && end <= right) return sgt[node];						// 범위 내에 있으면 값을 sgt[node]를 return

	int mid = (start + end) / 2;
	int left_idx = minh(node * 2, start, mid, left, right);
	int right_idx = minh(node * 2 + 1, mid + 1, end, left, right);

	if (left_idx == INF) return right_idx;										// left_idx가 범위 밖이면 right_idx를 return
	else if (right_idx == INF) return left_idx;									// right_idx가 범위 밖이면 left_idx를 return
	else return arr[left_idx] < arr[right_idx] ? left_idx : right_idx;			// left_idx와 right_idx가 모두 범위 내에 있는 경우 최소 높이의 idx를 return
}

void sol(int left, int right)													// 최소 높이에 따른 히스토그램의 최대 크기를 찾는 함수
{
	if (left > right) return;													// left가 right보다 커질 경우 종료 (이분 탐색 조건과 동일)
	int idx = minh(1, 1, n, left, right);										/* 최소 index를 구한다 
																				   (왼쪽부터 탐색하는 세그먼트 트리의 특성 상 최소 높이 중 가장 왼쪽의 index가 나옴) */
	ans = max(ans, arr[idx] * (right - left + 1));								// 기존의 ans값과 새로 나온 ans값 중 더 큰 값을 ans값으로 return
	sol(left, idx - 1);															// 최소 높이 index의 좌측 구간에서의 최대 크기를 탐색한다
	sol(idx + 1, right);														// 최소 높이 index의 우측 구간에서의 최대 크기를 탐색한다
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);

	while (1)
	{
		ans = 0;																// ans값을 0으로 초기화
		cin >> n;
		if (n == 0) break;
		arr.resize(n + 1);
		for (int i = 1; i <= n; i++)
		{
			cin >> arr[i];
		}
		int height = (int)ceil(log2(n));
		int tsize = 1 << (height + 1);
		sgt.resize(tsize);
		make_sgt(1, 1, n);
		sol(1, n);
		cout << ans << "\n";
		arr.resize(0);															// arr 배열 초기화
		sgt.resize(0);															// sgt 배열 초기화
	}
}
