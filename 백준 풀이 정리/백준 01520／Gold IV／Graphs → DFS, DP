// https://www.acmicpc.net/problem/1520

// DFS를 Dynamic Programming으로 구현한 풀이
#include <iostream>
#include <vector>

using namespace std;

int n, m;
vector <vector <int>> v;
int dp[501][501];
int dx[4] = { -1, 1, 0, 0 };
int dy[4] = { 0, 0, -1, 1 };

int dfs(int x, int y)
{
	if (x == n && y == m) return 1;					// 마지막 점에 도착한 경우, dfs의 값을 1로 return해 도착 경로가 1개 추가됨을 표시
	if (dp[x][y] != -1) return dp[x][y];				// 이미 탐색했던 경로이면 그 경로에서의 도착 경로의 수를 return (bottom-up으로 수행됨)
	dp[x][y] = 0;							// 탐색하지 않은 경로(-1로 표시된 경로)이면 0으로 바꿔줌
	
	for (int i = 0; i < 4; i++)
	{
		int nx = x + dx[i];
		int ny = y + dy[i];

		if (nx >= 1 && ny >= 1 && nx <= n && ny <= m)
		{
			if (v[x][y] > v[nx][ny])
			{
				dp[x][y] += dfs(nx, ny);		// (현재 지점의 도착 경로의 수) += (다음에 지점의 도착 경로의 수)
			}
		}
	}
	return dp[x][y];
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);

	cin >> n >> m;
	v.resize(n + 1, vector <int>(m + 1));
	fill_n(dp[0], 251001, -1);					// 탐색하지 않은 점을 -1로 초기화
	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= m; j++)
		{
			cin >> v[i][j];
		}
	}
	cout << dfs(1, 1);						// (1, 1)에서 (n, m)까지의 경로를 탐색함과 동시에 출력
}
